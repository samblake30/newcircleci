---
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@9.5.1
  gh: circleci/github-cli@2.7.0

commands:
  envsubst:
    description: Substitutes environment variables for helm base resources
    parameters:
      file_name:
        type: string
        description: Name of the file to export
    steps:
    - run:
        name: Substitutes environment variables for helm base resources
        command: |
          export namespace=$SERVICE_NAME
          cd ./$SERVICE_NAME
          kustomize create --autodetect
          cd ..
          kustomize build ./$SERVICE_NAME | flux envsubst --strict > << parameters.file_name >>.yaml
          if [ $? -ne 0 ]; then
            echo "Build or envsubst failed."
            exit 1
          fi
          rm ./$SERVICE_NAME/kustomization.yaml
          cp << parameters.file_name >>.yaml $ARTIFACTS_DIR/

  manifest:
    description: Generates the manifest file with default values
    parameters:
      file_name:
        type: string
        description: Name of the file to export
    steps:
    - run:
        name: Generates the manifest file with default values
        command: |
          url=$(yq 'select(documentIndex == 0).spec.url' $SERVICE_NAME/helm.yaml)
          yq 'select(documentIndex == 1).data."values.yaml"' helm-base-envsubst-default.yaml > values.yaml
          echo "URL: $url"
          cat values.yaml
          helm repo add $SERVICE_NAME $url
          helm repo update
          helm template --version $SERVICE_VERSION --namespace $SERVICE_NAME $SERVICE_NAME $SERVICE_NAME/$SERVICE_NAME -f ./values.yaml > << parameters.file_name >>.yaml
          cp << parameters.file_name >>.yaml $ARTIFACTS_DIR/

  gendefaultcm:
    description: Generates default configMap with default values from var substitution
    parameters:
      file_name:
        type: string
        description: Name of the file to export
    steps:
    - run:
        name: Generate sample configMap containing sample values exported from variable defaults
        command: |
          python3 .circleci/extract_defaults.py ./$SERVICE_NAME/values.yaml > << parameters.file_name >>.yaml
          cp << parameters.file_name >>.yaml $ARTIFACTS_DIR/

executors:
  std: &std
    working_directory: /home/circleci/opt/project
    docker:
    - image: cimg/base:current-22.04
    environment: &common_env
      PROJECT: helm-charts
      ARTIFACTS_DIR: /home/circleci/opt/project/artifacts
      version_file: /home/circleci/opt/project/artifacts/VERSION
      OCI_REPO: oci://125952381355.dkr.ecr.us-west-2.amazonaws.com/helm-charts/helm-base
      DEFAULT_EVENSUBT: helm-base-envsubst-default
      DEFAULT_MANIFEST: helm-chart-manifest-default
      PREVIOUS_EVENSUBT: helm-base-envsubst-previous
      PREVIOUS_MANIFEST: helm-chart-manifest-previous
      SAMPLE_CONFIGMAP: helm-base-sample-cm
      GOPATH: /go
      GOBIN: /opt/project/bin
      GOFLAGS: -mod=readonly -trimpath

jobs:
  build:
    parameters:
      builder:
        type: executor
        default: std
    executor: << parameters.builder >>
    steps:
    - checkout
    - run:
        name: configure git and working dirs
        command: |
          set -e
          git config --global user.email "ankitsambhare3004@gmail.com"
          git config --global user.name "samblake30"
          git config --global push.default simple
          git config --global url."git@github.com-samblake30:".insteadOf "https://github.com/"
          mkdir -p  $ARTIFACTS_DIR
    - run:
        name: Install Python and pip
        command: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
    - run:
        name: Install pre-commit
        command: pip install pre-commit
    - run:
        name: Run pre-commit
        command: pre-commit run --all-files
    - run:
        name: Identify Modified Services
        command: |
          services=$(git diff --name-only origin/main...HEAD | grep '^[^/.][^/]*\/' | cut -d'/' -f1 | grep -vE '^\.(circleci|github)$' | sort | uniq)
          service_count=$(echo "$services" | wc -l)

          if [ "$service_count" -ne 1 ]; then
            echo "❌ PR modifies multiple or zero services."
            echo "$services"
            exit 1
          fi

          service_name=$(echo "$services" | head -n1)
          echo "SERVICE_NAME=$service_name" >> $BASH_ENV

          version=$(grep 'version:' "$service_name/helm.yaml" | head -n1 | awk '{print $2}' | tr -d "'\"")
          echo "SERVICE_VERSION=$version" >> $BASH_ENV

    - run:
        name: Generate Incremented Tag
        command: |
          service=$SERVICE_NAME
          version=$SERVICE_VERSION

          # Find all existing tags on main matching the pattern
          git fetch --tags
          existing_tags=$(git tag -l "${service}-*" | while read tag; do
            if git merge-base --is-ancestor "$tag" origin/main; then
              echo "$tag"
            fi
          done)
          echo "Existing tags: $existing_tags"

          if [ -z "$existing_tags" ]; then
            increment=1
            previous_tag=false
          else
            last_increment=$(echo "$existing_tags" | awk -F'-' '{print $NF}' | sort -n | tail -n1)
            increment=$((last_increment + 1))
            previous_tag=$(echo "$existing_tags" | grep -- "-${last_increment}$" | tail -n1)
          fi

          new_tag="${service}-${version}-${increment}"
          echo "NEW_TAG=$new_tag" >> $BASH_ENV
          echo $new_tag > $version_file
          echo "version file: $version_file"
          echo "Last version: $previous_tag"
          echo "New version: $new_tag"
          echo "PREVIOUS_TAG=$previous_tag" >> $BASH_ENV
          cp $BASH_ENV $ARTIFACTS_DIR/bash.env
    - run:
        name: Install kustomize
        command: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          chmod +x ./kustomize
          sudo mv ./kustomize /usr/local/bin/kustomize
          kustomize version
    - run:
        name: Install Flux CLI
        command: |
          curl -s https://fluxcd.io/install.sh | sudo bash
    - run:
        name: Install Helm
        command: |
          sudo curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version
    - run:
        name: Install jq
        command: |
          sudo apt install -y jq
          jq --version
    - run:
        name: Install validation tools
        command: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

          # Install kubeconform
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          chmod +x kubeconform
          sudo mv kubeconform /usr/local/bin/kubeconform
    - run:
        name: Check Flux OpenAPI
        command: |
          # skip Kubernetes Secrets due to SOPS fields failing validation
          kubeconform_flags=("-skip=Secret")
          kubeconform_config=("-strict" "-ignore-missing-schemas" "-schema-location" "default" "-schema-location" "/tmp/flux-crd-schemas" "-verbose")

          echo "INFO - Downloading Flux OpenAPI schemas"
          mkdir -p /tmp/flux-crd-schemas/master-standalone-strict
          curl -sL https://github.com/fluxcd/flux2/releases/latest/download/crd-schemas.tar.gz | tar zxf - -C /tmp/flux-crd-schemas/master-standalone-strict

          find "./$SERVICE_NAME" -type f -name '*.yaml' -print0 | while IFS= read -r -d $'\0' file;
            do
              echo "INFO - kubeconform validating $file"
              yq e 'true' "$file" > /dev/null
              kubeconform "${kubeconform_flags[@]}" "${kubeconform_config[@]}" "${file}"
              if [[ ${PIPESTATUS[0]} != 0 ]]; then
                echo "❌ kubeconform validation failed for $file"
                exit 1
              fi
          done
    - run:
        name: Install Python ruamel.yaml module
        command: pip3 install ruamel.yaml
    - envsubst:
        file_name: $DEFAULT_EVENSUBT
    - manifest:
        file_name: $DEFAULT_MANIFEST
    - gendefaultcm:
        file_name: $SAMPLE_CONFIGMAP
    - when:
        condition: PREVIOUS_TAG
        steps:
        - run:
            name: Checkout previous tag
            command: |
              echo $PREVIOUS_TAG
              # git fetch --tags
              # git checkout "$PREVIOUS_TAG"
        - envsubst:
            file_name: $PREVIOUS_EVENSUBT
        - manifest:
            file_name: $PREVIOUS_MANIFEST
        - run:
            name: generate diff envsubst
            command: |
              # Check if the previous envsubst file exists
              if [ -f "$ARTIFACTS_DIR/$PREVIOUS_EVENSUBT.yaml" ]; then
                diff -u "$ARTIFACTS_DIR/$PREVIOUS_EVENSUBT.yaml" "$ARTIFACTS_DIR/$DEFAULT_EVENSUBT.yaml" > "$ARTIFACTS_DIR/diff_envsubst.txt" || true
                echo "Diff generated successfully."
              else
                echo "No previous envsubst file found. Skipping diff generation."
                exit 1
              fi
        - run:
            name: generate diff manifest
            command: |
              # Check if the previous manifest file exists
              if [ -f "$ARTIFACTS_DIR/$PREVIOUS_MANIFEST.yaml" ]; then
                diff -u "$ARTIFACTS_DIR/$PREVIOUS_MANIFEST.yaml" "$ARTIFACTS_DIR/$DEFAULT_MANIFEST.yaml" > "$ARTIFACTS_DIR/diff_manifest.txt" || true
                echo "Diff generated successfully."
              else
                echo "No previous manifest file found. Skipping diff generation."
                exit 1
              fi

    - persist_to_workspace:
        root: /home/circleci/opt/project
        paths:
        - artifacts

  build-main:
    parameters:
      builder:
        type: executor
        default: std
    executor: << parameters.builder >>
    steps:
    - checkout
    - run:
        name: Install Python and pip
        command: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
    - run:
        name: Install pre-commit
        command: pip install pre-commit
    - run:
        name: Run pre-commit
        command: pre-commit run --all-files
    - run:
        name: Identify Modified Services
        command: |
          mkdir -p  $ARTIFACTS_DIR
          services=$(git diff --name-only HEAD^...HEAD | grep '^[^/.][^/]*\/' | cut -d'/' -f1 | grep -vE '^\.(circleci|github)$' | sort | uniq)
          service_count=$(echo "$services" | wc -l)

          if [ "$service_count" -ne 1 ]; then
            echo "❌ PR modifies multiple or zero services."
            echo "$services"
            exit 1
          fi

          service_name=$(echo "$services" | head -n1)
          echo "SERVICE_NAME=$service_name" >> $BASH_ENV

          version=$(grep 'version:' "$service_name/helm.yaml" | head -n1 | awk '{print $2}' | tr -d "'\"")
          echo "SERVICE_VERSION=$version" >> $BASH_ENV

    - run:
        name: Generate Incremented Tag
        command: |
          service=$SERVICE_NAME
          version=$SERVICE_VERSION

          # Find all existing tags on main matching the pattern
          git fetch --tags
          existing_tags=$(git tag -l "${service}-*" | while read tag; do
            if git merge-base --is-ancestor "$tag" origin/main; then
              echo "$tag"
            fi
          done)
          echo "Existing tags: $existing_tags"

          if [ -z "$existing_tags" ]; then
            increment=1
            previous_tag=false
          else
            last_increment=$(echo "$existing_tags" | awk -F'-' '{print $NF}' | sort -n | tail -n1)
            increment=$((last_increment + 1))
            previous_tag=$(echo "$existing_tags" | grep -- "-${last_increment}$" | tail -n1)
          fi

          new_tag="${service}-${version}-${increment}"
          echo "NEW_TAG=$new_tag" >> $BASH_ENV
          echo $new_tag > $version_file
          echo "version file: $version_file"
          echo "Last version: $previous_tag"
          echo "New version: $new_tag"
          echo "PREVIOUS_TAG=$previous_tag" >> $BASH_ENV
          cp $BASH_ENV $ARTIFACTS_DIR/bash.env
    - run:
        name: Install kustomize
        command: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          chmod +x ./kustomize
          sudo mv ./kustomize /usr/local/bin/kustomize
          kustomize version
    - run:
        name: Install Flux CLI
        command: |
          curl -s https://fluxcd.io/install.sh | sudo bash
    - run:
        name: Install Helm
        command: |
          sudo curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version
    - run:
        name: Install jq
        command: |
          sudo apt install -y jq
          jq --version
    - run:
        name: Install validation tools
        command: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

          # Install kubeconform
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          chmod +x kubeconform
          sudo mv kubeconform /usr/local/bin/kubeconform
    - run:
        name: Check Flux OpenAPI
        command: |
          # skip Kubernetes Secrets due to SOPS fields failing validation
          kubeconform_flags=("-skip=Secret")
          kubeconform_config=("-strict" "-ignore-missing-schemas" "-schema-location" "default" "-schema-location" "/tmp/flux-crd-schemas" "-verbose")

          echo "INFO - Downloading Flux OpenAPI schemas"
          mkdir -p /tmp/flux-crd-schemas/master-standalone-strict
          curl -sL https://github.com/fluxcd/flux2/releases/latest/download/crd-schemas.tar.gz | tar zxf - -C /tmp/flux-crd-schemas/master-standalone-strict

          find "./$SERVICE_NAME" -type f -name '*.yaml' -print0 | while IFS= read -r -d $'\0' file;
            do
              echo "INFO - kubeconform validating $file"
              yq e 'true' "$file" > /dev/null
              kubeconform "${kubeconform_flags[@]}" "${kubeconform_config[@]}" "${file}"
              if [[ ${PIPESTATUS[0]} != 0 ]]; then
                echo "❌ kubeconform validation failed for $file"
                exit 1
              fi
          done
    - run:
        name: Install Python ruamel.yaml module
        command: pip3 install ruamel.yaml
    - envsubst:
        file_name: $DEFAULT_EVENSUBT
    - manifest:
        file_name: $DEFAULT_MANIFEST
    - gendefaultcm:
        file_name: $SAMPLE_CONFIGMAP
    - when:
        condition: PREVIOUS_TAG
        steps:
        - run:
            name: Checkout previous tag
            command: |
              echo $PREVIOUS_TAG
              # git fetch --tags
              # git checkout "$PREVIOUS_TAG"
        - envsubst:
            file_name: $PREVIOUS_EVENSUBT
        - manifest:
            file_name: $PREVIOUS_MANIFEST
        - run:
            name: generate diff envsubst
            command: |
              # Check if the previous envsubst file exists
              if [ -f "$ARTIFACTS_DIR/$PREVIOUS_EVENSUBT.yaml" ]; then
                diff -u "$ARTIFACTS_DIR/$PREVIOUS_EVENSUBT.yaml" "$ARTIFACTS_DIR/$DEFAULT_EVENSUBT.yaml" > "$ARTIFACTS_DIR/diff_envsubst.txt" || true
                echo "Diff generated successfully."
              else
                echo "No previous envsubst file found. Skipping diff generation."
                exit 1
              fi
        - run:
            name: generate diff manifest
            command: |
              # Check if the previous manifest file exists
              if [ -f "$ARTIFACTS_DIR/$PREVIOUS_MANIFEST.yaml" ]; then
                diff -u "$ARTIFACTS_DIR/$PREVIOUS_MANIFEST.yaml" "$ARTIFACTS_DIR/$DEFAULT_MANIFEST.yaml" > "$ARTIFACTS_DIR/diff_manifest.txt" || true
                echo "Diff generated successfully."
              else
                echo "No previous manifest file found. Skipping diff generation."
                exit 1
              fi

    - persist_to_workspace:
        root: /home/circleci/opt/project
        paths:
        - artifacts

  comment:
    parameters:
      builder:
        type: executor
        default: std
    executor: << parameters.builder >>
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci/opt/project
    - run:
        name: Check if diff files exist and set DIFF env variable
        command: |
          ENVSUBSET_FILE="$ARTIFACTS_DIR/diff_envsubst.txt"
          MANIFEST_FILE="$ARTIFACTS_DIR/diff_manifest.txt"
          if [ -f "$ENVSUBSET_FILE" ] || [ -f "$MANIFEST_FILE" ]; then
            echo "DIFF=true" >> $BASH_ENV
            echo "Diff files found. DIFF=true"
          else
            echo "DIFF=false" >> $BASH_ENV
            echo "No diff files found. DIFF=false"
          fi
    - run:
        name: Post Stats to GitHub PR
        command: |
          # Retrieve open PR information from GitHub API
          pr_response=$(curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open")

          echo "GitHub API URL: https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open"
          echo "GitHub API Response: $pr_response"

          # Validate response format
          if ! echo "$pr_response" | jq -e 'type=="array"' >/dev/null; then
            echo "❌ Invalid response from GitHub API:"
            echo "$pr_response"
            exit 1
          fi

          # Check if any PRs were found
          if [ "$(echo "$pr_response" | jq length)" -eq 0 ]; then
            echo "ℹ️ No open PR found for branch $CIRCLE_BRANCH."
            exit 0
          fi

          # Extract PR comment URL
          pr_comment_url=$(echo "$pr_response" | jq -r ".[0]._links.comments.href")

          # Read YAML file and escape for JSON
          YAML_FILE="$ARTIFACTS_DIR/$DEFAULT_MANIFEST.yaml"
          CLEAN_FILE="$ARTIFACTS_DIR/$DEFAULT_EVENSUBT.yaml"

          if [ ! -f "$YAML_FILE" ]; then
          echo "❌ YAML_FILE not found: $YAML_FILE"
          exit 1
          fi
          if [ ! -f "$CLEAN_FILE" ]; then
          echo "❌ CLEAN_FILE not found: $CLEAN_FILE"
          exit 1
          fi

          YAML_CONTENT=$(awk '{print "    " $0}' "$YAML_FILE")
          CLEAN_CONTENT="$(yq e '.' "$CLEAN_FILE" | sed 's/\\n/\n/g')"
          # Build the Markdown body with collapsible details
          BODY="Automated update: Validation and generation steps completed successfully.
          <details>
          <summary>Show Helm Base resousres Validation</summary>

          \`\`\`yaml
          $CLEAN_CONTENT
          \`\`\`
          </details>
          <details>
          <summary>Show default generated manifest.yaml</summary>

          \`\`\`yaml
          $YAML_CONTENT
          \`\`\`
          </details>
          "

          # Use file instead of inline body
          comment_response=$(curl -sSL -w "%{http_code}" -o comment_output.json -X POST "$pr_comment_url" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"body\": $(echo "$BODY" | jq -Rs .) }")

          if [ "$comment_response" -ne 201 ]; then
            echo "❌ Failed to post comment to PR. HTTP status: $comment_response"
            cat comment_output.json
            exit 1
          fi

          echo "✅ Comment posted successfully to PR."
    - when:
        condition: DIFF
        steps:
        - run:
            name: Post Diff to GitHub PR
            command: |
              # Retrieve open PR information from GitHub API
              pr_response=$(curl -sSL \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open")

              echo "GitHub API URL: https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open"
              echo "GitHub API Response: $pr_response"

              # Validate response format
              if ! echo "$pr_response" | jq -e 'type=="array"' >/dev/null; then
                echo "❌ Invalid response from GitHub API:"
                echo "$pr_response"
                exit 1
              fi

              # Check if any PRs were found
              if [ "$(echo "$pr_response" | jq length)" -eq 0 ]; then
                echo "ℹ️ No open PR found for branch $CIRCLE_BRANCH."
                exit 0
              fi

              # Extract PR comment URL
              pr_comment_url=$(echo "$pr_response" | jq -r ".[0]._links.comments.href")

              # Read YAML file and escape for JSON
              ENVSUBSET_FILE="$ARTIFACTS_DIR/diff_envsubst.txt"
              MANIFEST_FILE="$ARTIFACTS_DIR/diff_manifest.txt"
              SAMPLE_CONFIGMAP_FILE="$ARTIFACTS_DIR/$SAMPLE_CONFIGMAP.yaml"

              YAML_CONTENT=$(awk '{print "    " $0}' "$ENVSUBSET_FILE")
              CLEAN_CONTENT=$(awk '{print "    " $0}' "$MANIFEST_FILE")
              SAMPLE_CONFIGMAP_CONTENT=$(awk '{print "    " $0}' "$SAMPLE_CONFIGMAP_FILE")

              # Build the Markdown body with collapsible details
              BODY="Automated update: Validation and generation steps completed successfully.
              <details>
              <summary>Show Helm Base diff with previous version</summary>

              \`\`\`diff
              $CLEAN_CONTENT
              \`\`\`
              </details>
              <details>
              <summary>Show diff manifest with previous version</summary>

              \`\`\`diff
              $YAML_CONTENT
              \`\`\`
              </details>
              <details>
              <summary>Sample ConfigMap with default values to be used in sk8r</summary>

              \`\`\`diff
              $SAMPLE_CONFIGMAP_CONTENT
              \`\`\`
              </details>
              "

              # Post comment to PR
              comment_response=$(curl -sSL -w "%{http_code}" -o comment_output.json -X POST "$pr_comment_url" \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -d "{\"body\": $(echo "$BODY" | jq -Rs .) }")

              if [ "$comment_response" -ne 201 ]; then
                echo "❌ Failed to post comment to PR. HTTP status: $comment_response"
                cat comment_output.json
                exit 1
              fi

              echo "✅ Comment posted successfully to PR."


  push:
    parameters:
      builder:
        type: executor
        default: std
    executor: << parameters.builder >>
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci/opt/project
    - run:
        name: ENV
        command: |
          cat $ARTIFACTS_DIR/bash.env >> $BASH_ENV
    - run:
        name: Install Flux CLI
        command: |
          curl -s https://fluxcd.io/install.sh | sudo bash
    - aws-ecr/ecr_login:
        region: us-west-2
    - run:
        name: Push Artifacts to OCI Repository
        command: |
          export AWS_SDK_LOAD_CONFIG=1
          flux push artifact "$OCI_REPO:$NEW_TAG" \
            --path="./$SERVICE_NAME" \
            --source="$(git config --get remote.origin.url)" \
            --revision="$NEW_TAG:@sha1:$(git rev-parse HEAD)" \
            --provider aws

  release:
    parameters:
      builder:
        type: executor
        default: std
    executor: << parameters.builder >>
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci/opt/project
    - run:
        name: ENV
        command: |
          cat $ARTIFACTS_DIR/bash.env >> $BASH_ENV
    - gh/setup:
        token: GH_TOKEN
    - run:
        name: Generate Release
        command: |
          gh release create "$NEW_TAG" --title "$NEW_TAG" --target "$CIRCLE_SHA1" "$ARTIFACTS_DIR/$DEFAULT_MANIFEST.yaml" \
            "$ARTIFACTS_DIR/$DEFAULT_EVENSUBT.yaml" \
            "$ARTIFACTS_DIR/$SAMPLE_CONFIGMAP.yaml"

workflows:
  workflow:
    jobs:
    - build:
        filters:
          branches:
            ignore:
            - main
            - master
            - /dev\/.*
        context: ctx-ci
        matrix:
          parameters:
            builder:
            - std
    - comment:
        filters:
          branches:
            ignore:
            - main
            - master
            - /dev\/.*
        context: ctx-ci
        requires:
        - build
    - build-main:
        filters:
          branches:
            only:
            - main
        context: ctx-ci
        matrix:
          parameters:
            builder:
            - std
    - push:
        filters:
          branches:
            only:
            - main
        requires:
        - build-main
    - release:
        filters:
          branches:
            only:
            - main
        requires:
        - build-main
